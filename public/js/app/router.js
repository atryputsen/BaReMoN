// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'HomeView', 'HeaderView', 'ClientListView', 'ClientView', 'ClientEditView', 'ClientModel', 'LoginView', 'RegisterView', 'ProjectModel'], function($, _, Backbone, HomeView, HeaderView, ClientListView, ClientView, ClientEditView, Client, LoginView, RegisterView, Project) {
    var AppRouter, _ref;

    return AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        _ref = AppRouter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      AppRouter.prototype.routes = {
        '': 'home',
        'home': 'home',
        'clients': 'showClients',
        'clients/new': 'addClient',
        'clients/:id': 'showClient',
        'clients/:id/edit': 'editClient',
        'login': 'login',
        'register': 'register',
        'logout': 'logout',
        '*actions': 'defaultAction'
      };

      AppRouter.prototype.initialize = function() {
        this.headerView = new HeaderView();
        this.elms = {
          'page-content': $('.page-content')
        };
        $('header').hide().html(this.headerView.render().el).fadeIn('slow');
        return $('footer').fadeIn('slow');
      };

      AppRouter.prototype.isAuth = function(authenticated) {
        if (!authenticated) {
          return localStorage.setItem('isAuth', false);
        }
      };

      AppRouter.prototype.checkLogin = function(callback) {
        var check;

        check = null;
        $.ajax('/account/authenticated', {
          methods: 'GET',
          success: function() {
            return check = callback(true);
          },
          error: function() {
            return check = callback(false);
          }
        });
        return check;
      };

      AppRouter.prototype.home = function() {
        console.log('home');
        this.headerView.select('home-menu');
        if (!this.homeView) {
          this.homeView = new HomeView();
        }
        return this.elms['page-content'].html(this.homeView.render().el);
      };

      AppRouter.prototype.showClients = function() {
        var _this = this;

        console.log(localStorage);
        if (localStorage.getItem('isAuth') === 'false') {
          return window.location.replace('#/login');
        } else {
          this.headerView.select('list-menu');
          if (!this.clientListView) {
            this.clientListView = new ClientListView();
          }
          return this.clientListView.render(function() {
            return _this.elms['page-content'].html(_this.clientListView.el);
          });
        }
      };

      AppRouter.prototype.showClient = function(id) {
        var model, view,
          _this = this;

        if (localStorage.getItem('isAuth') === 'false') {
          return window.location.replace('#/login');
        } else {
          view = {};
          this.headerView.select();
          model = new Client({
            _id: id,
            _silent: true
          });
          return model.fetch({
            success: function(model) {
              model.unset('_silent');
              view = new ClientView({
                model: model
              });
              _this.elms['page-content'].html(view.render().el);
              return view.model.on('delete-success', function() {
                return window.location.replace('#/clients');
              });
            }
          });
        }
      };

      AppRouter.prototype.addClient = function() {
        var model, view;

        if (localStorage.getItem('isAuth') === 'false') {
          return window.location.replace('#/login');
        } else {
          this.headerView.select('new-menu');
          model = new Client();
          view = new ClientEditView({
            model: model
          });
          this.elms['page-content'].html(view.render().el);
          view.on('back', function() {
            return window.location.replace('#/clients');
          });
          return view.model.on('save-success', function(id) {
            return window.location.replace('#/clients/' + id);
          });
        }
      };

      AppRouter.prototype.editClient = function(id) {
        var model,
          _this = this;

        if (localStorage.getItem('isAuth') === 'false') {
          return window.location.replace('#/login');
        } else {
          this.headerView.select();
          model = new Client({
            _id: id,
            _silent: true
          });
          return model.fetch({
            success: function(model) {
              var view;

              model.unset('_silent');
              view = new ClientEditView({
                model: model
              });
              _this.elms['page-content'].html(view.render().el);
              view.on('back', function() {
                return window.location.replace('#/clients/' + id);
              });
              return view.model.on('save-success', function() {
                return window.location.replace('#/clients/' + id);
              });
            }
          });
        }
      };

      AppRouter.prototype.login = function() {
        console.log('login');
        console.log(localStorage);
        if (!this.LoginView) {
          this.LoginView = new LoginView();
        }
        return this.elms['page-content'].html(this.LoginView.render().el);
      };

      AppRouter.prototype.logout = function(req, res) {
        console.log('logout');
        $.get('/logout', function() {
          localStorage.setItem('isAuth', 'false');
          return window.location.replace('#/login');
        }).error(function() {
          $("#error").text('Unable to login.');
          return $("#error").slideDown();
        });
        return false;
      };

      AppRouter.prototype.register = function() {
        console.log('RegisterView');
        if (!this.RegisterView) {
          this.RegisterView = new RegisterView();
        }
        return this.elms['page-content'].html(this.RegisterView.render().el);
      };

      return AppRouter;

    })(Backbone.Router);
  });

}).call(this);
