// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'jade!app/templates/clients/edit', 'ClientModel'], function($, _, Backbone, tpl, Client) {
  var ClientEditView, _ref;

  return ClientEditView = (function(_super) {
    __extends(ClientEditView, _super);

    function ClientEditView() {
      _ref = ClientEditView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ClientEditView.prototype.initialize = function() {
      this.template = tpl;
      this.errTmpl = '<div class="span4">';
      this.errTmpl += '<div class="alert alert-error">';
      this.errTmpl += '<button type="button" class="close" data-dismiss="alert">x</button>';
      this.errTmpl += '<%- msg %>';
      this.errTmpl += '</div>';
      this.errTmpl += '</div>';
      return this.errTmpl = _.template(this.errTmpl);
    };

    ClientEditView.prototype.events = {
      "focus .input-prepend input": "removeErrMsg",
      "click .save-btn": "saveClient",
      "click .back-btn": "goBack",
      "click .close": "removeErrMsg"
    };

    ClientEditView.prototype.render = function() {
      var tmpl;

      tmpl = this.template({
        client: this.model.toJSON()
      });
      $(this.el).html(tmpl);
      return this;
    };

    ClientEditView.prototype.goBack = function(e) {
      e.preventDefault();
      return this.trigger('back');
    };

    ClientEditView.prototype.saveClient = function(e) {
      var company, email, name, phone, _that;

      console.log('Save Client');
      _that = this;
      name = $.trim($('#name-input').val());
      email = $.trim($('#email-input').val());
      company = $.trim($('#company-input').val());
      phone = $.trim($('#phone-input').val());
      if (phone) {
        phone = phone;
      } else {
        phone = null;
      }
      console.log(this.model);
      return this.model.save({
        name: name,
        email: email,
        company: company,
        phone: phone
      }, {
        silent: false,
        sync: true,
        success: function(model, res) {
          console.log(res);
          if (res && res.errors) {
            return _that.renderErrMsg(res.error);
          } else {
            return model.trigger('save-success', model.get('_id'));
          }
        },
        error: function(model, res) {
          console.log(res);
          if (res && res.errors) {
            return _that.renderErrMsg(res.errors);
          }
        }
      });
    };

    ClientEditView.prototype.renderErrMsg = function(err) {
      var msgs;

      this.removeErrMsg();
      msgs = [];
      if (_.isString(err)) {
        msgs.push(err);
      } else {
        if (err.general) {
          msgs.push(err.general);
          delete err.general;
        }
        if (_.keys(err).length) {
          msgs.push(_.keys(err).join(', ') + ' field(s) are invalid');
        }
      }
      msgs = _.map(msgs, function(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }).join('.');
      return $(this.el).find('form').after(this.errTmpl({
        msg: msgs
      }));
    };

    ClientEditView.prototype.removeErrMsg = function() {
      return $(this.el).find('.alter-error').remove();
    };

    return ClientEditView;

  })(Backbone.View);
});
